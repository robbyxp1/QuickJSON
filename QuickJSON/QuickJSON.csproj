<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net5.0;net48</TargetFrameworks>
  </PropertyGroup>

  <PropertyGroup>
    <DefaultDocumentationAssemblyPageName>QuickJSON-Class-List</DefaultDocumentationAssemblyPageName>
    <DefaultDocumentationGeneratedPages>Classes,Delegates,Interfaces</DefaultDocumentationGeneratedPages>
    <DefaultDocumentationFileNameMode>FullName</DefaultDocumentationFileNameMode>
    <DefaultDocumentationFolder>bin\mddoc</DefaultDocumentationFolder>
    <DefaultDocumentationRemoveFileExtensionFromLinks>True</DefaultDocumentationRemoveFileExtensionFromLinks>
    <DefaultDocumentationExternLinksFiles>docexternlinks.txt</DefaultDocumentationExternLinksFiles>
    <DefaultDocumentationGeneratedAccessModifiers>Public,Protected</DefaultDocumentationGeneratedAccessModifiers>
    <DefaultDocumentationNestedTypeVisibilities>DeclaringType</DefaultDocumentationNestedTypeVisibilities>
    <PackageId>RJKJSoft.QuickJSON</PackageId>
    <Authors>robbyxp @ github.com</Authors>
    <PackageProjectUrl>https://github.com/robbyxp1/QuickJSON</PackageProjectUrl>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageReadmeFile>readme.md</PackageReadmeFile>
    <RepositoryUrl>https://github.com/robbyxp1/QuickJSON</RepositoryUrl>
    <RepositoryType>Git</RepositoryType>
    <PackageTags>JSON QuickJSON Decoder Encoder</PackageTags>
    <PackageReleaseNotes>2.2
ToObject now caches member info for speed. checkcustomattr is now withdrawn from the interfaces.
2.1
Can Add/AddRange to a JArray via a JToken now, and add to a JObject via JToken
Can Extract more lists of values from JArray (DateTime/Bool/Float)
Add new DateTimeUTC extractor
Add TraceOutput switch which will report to the trace system if a enum value does not convert - for catching errors which are masked by ignoretypeerrors
ToObject preprocessor improved with more accessors supporting the option

2.0.2
Add to ToObject preprocess allowing manipulation of DateTime/Enums before parsing in case they are decorated
2.0.1
Fixed ToString so that assigning an existing JToken to a new key, the new key name is printed, not the parsed name.  Changed synthetic key names for repeat and emptyname to make them more recognisable
2.0
Add JSONSchema - implements most of 2022-12 schema
Add JSONFormatter.ToFluent - convert an object to fluent syntax.  Fluent is great for streaming large amounts of JSON to a file. Add a Fluent Streamer class.
Token: Add ValueEquals. Improve IgnoreAttribute. Add GetTokenSchemaPath and GetToken by path.
Token: Add Level to JToken when parsed. Support multiple repeated names in objects when parsed - introduced OriginalName (from file) and ParsedName
Token: Add TryGet* to JToken object extentions.
Object: Object.Contains functions added. Add Object.Rename. Add Object.Merge
Arrays: Add Array.IndexOf(Token).
String output: Add line wrap to ToString.
Fix LoadTokens error in array.
1.4
JsonIgnoreAttribute added Ignore and IncludeOnly options so that you can pick members of a class or exclude specific ones
1.3
ToObject was missing a converstion to Object - added.
1.2
Improved string parser with more functionality for use by discrete parser implementations
1.1 
ToObject and FromObject gets better handling of IEnumerations, so HashSet can be handled
1.01
Upload to Nuget had wrong dll - try again
1.00
Fix issue with FromObject when access property indexer []
Made ToString() work so much faster by using StringBuilder!
0.95
Fix issue with DateTimeUTC so it returns a mindate with UTC kind if it fails to convert
DoubleNull and FloatNull added</PackageReleaseNotes>
    <Description>A quick JSON encoder and decoder for .net.
Designed for speed and compactness.
Code can be XCOPYED into your project to avoid DLL dependencies.
</Description>
    <Copyright>(C) robbyxp @ github.com  2020-2024</Copyright>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Version>2.2.0</Version>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <FileVersion>2.2.0.0</FileVersion>
    <Company>robbyxp @ github.com</Company>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(TargetFramework)|$(Platform)'=='Release|net5.0|AnyCPU'">
    <DocumentationFile>C:\Code\QuickJSON\QuickJSON\bin\release\QuickJSON.xml</DocumentationFile>
  </PropertyGroup>



  <!-- Conditionally obtain references for the .NET Framework target -->
  <ItemGroup Condition=" '$(TargetFramework)' == 'net48' ">
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>
  <ItemGroup>
    <Compile Remove="QuickJson.cs" />
    <Compile Remove="QuickJsonFluent.cs" />
  </ItemGroup>

  <ItemGroup>
    <None Include="readme.md" Pack="true" PackagePath="" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="DefaultDocumentation" Version="0.7.9">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Debug'">
    <DefineConstants>DEBUG;TRACE;JSONBIGINT</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)'=='Release'">
    <DefineConstants>TRACE;JSONBIGINT</DefineConstants>
  </PropertyGroup>

</Project>
